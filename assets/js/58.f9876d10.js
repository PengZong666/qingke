(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{412:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("下面来谈一下ApplicationListener：监听容器中发布的事件，事件驱动模型开发。")]),t._v(" "),a("p",[t._v("点进去可以看到，它是一个接口，并且接口有泛型。也就是说，它会监听ApplicationEvent及其子类下面的事件。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220210190535225.png",alt:"image-20220210190535225"}})]),t._v(" "),a("p",[t._v("我们写一个简单的事件：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atqingke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationListener")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stereotype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Component")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @Author pengbin007\n * @Date 2022/2/10 18:57\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyApplicationListener")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationListener")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 当容器中发布此事件后，方法触发\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onApplicationEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"收到事件："')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("那么如何发布这个事件呢？在applicationContext里面就有发布事件的方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atqingke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atqingke"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExtConfig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("junit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotationConfigApplicationContext")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @Author pengbin007\n * @Date 2022/2/10 15:52\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExtTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Test")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test01")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotationConfigApplicationContext")]),t._v(" applicationContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AnnotationConfigApplicationContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExtConfig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发布事件")]),t._v("\n        applicationContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("publishEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我发布的事件"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        applicationContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("运行，可以看到，现在容器中有三个事件：一个我们自定义的、一个是容器刷新时候的事件、一个是容器关闭时候的事件：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220210190748526.png",alt:"image-20220210190748526"}})]),t._v(" "),a("blockquote",[a("p",[t._v("步骤：")]),t._v(" "),a("ol",[a("li",[t._v("写一个监听器（ApplicationListener实现类）来监听某个事件（ApplicationEven及其子类）。")]),t._v(" "),a("li",[t._v("把监听器加入到容器中。")]),t._v(" "),a("li",[t._v("只要容器中有相应事件的发布，我们就能监听到这个事件。")]),t._v(" "),a("li",[t._v("发布一个事件：applicationContext.publishEvent();")])])]),t._v(" "),a("h2",{attrs:{id:"applicationlistener原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#applicationlistener原理"}},[t._v("#")]),t._v(" ApplicationListener原理")]),t._v(" "),a("p",[t._v("通过上面的例子，我们让容器收到了三个事件：ContextRefreshedEvent、ExtTest$1、ContextClosedEvent，我们来看一下ApplicationListener是如何监听这些事件的。Debug运行，可以看到在refresh方法最后有一步finishRefresh();")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211131657698.png",alt:"image-20220211131657698"}})]),t._v(" "),a("p",[t._v("注释中也说了，在这里发布相对应的事件，也就是我们的ContextRefreshedEvent。进去就可以看到，它创建了一个ContextRefreshedEvent对象，然后将其发布出去：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211131844702.png",alt:"image-20220211131844702"}})]),t._v(" "),a("p",[t._v("我们进去看一下它的事件发布流程是怎样的！首先是来到我们的日志输入部分，以及判断事件是否为ApplicationEvent，如果不是就将其转为ApplicationEvent：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211144541344.png",alt:"image-20220211144541344"}})]),t._v(" "),a("p",[t._v("然后先获取事件的多播器（发布器）getApplicationEventMulticaster()，获取到多播器之后，再使用multicastEvent(applicationEvent, eventType)派发事件：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211144715398.png",alt:"image-20220211144715398"}})]),t._v(" "),a("p",[t._v("我们可以进去看它是如何派发事件的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211144929631.png",alt:"image-20220211144929631"}})]),t._v(" "),a("p",[t._v("它会利用一个增强for循环获取到所有的ApplicationListener，然后判断如果有Executor，可以支持使用Executor进行异步派发；否则，直接使用同步的方式执行listener方法，拿到listener回调我们的onApplicationEvent方法。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211145322719.png",alt:"image-20220211145322719"}})]),t._v(" "),a("p",[t._v("如此，也就将我们的ContextRefreshedEvent事件发布出去了，其它两个事件的发布流程也都是类似的。")]),t._v(" "),a("h2",{attrs:{id:"事件多播器-派发器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件多播器-派发器"}},[t._v("#")]),t._v(" 事件多播器(派发器)")]),t._v(" "),a("p",[t._v("从上面的事件发布流程我们知道，在事件发布之前需要先获取到我们的事件多播器getApplicationEventMulticaster()，那么这个事件多播器是从哪里来的呢？我们回到我们的refresh方法里面，可以看到里面有一个initApplicationEventMulticaster()初始化应用程序的事件多播器：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211145709631.png",alt:"image-20220211145709631"}})]),t._v(" "),a("p",[t._v("进去可以看到，它会先去容器中找看有没有id等于applicationEventMulticaster的组件：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211145934643.png",alt:"image-20220211145934643"}})]),t._v(" "),a("p",[t._v("如果有，那么就会拿到这个组件；而没有，则会new SimpleApplicationEventMulticaster(beanFactory)再注册到容器中去，这样我们就可以在其它组件要派发事件时，自动注入这个applicationEventMulticaster。")]),t._v(" "),a("h2",{attrs:{id:"getapplicationlisteners-event-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getapplicationlisteners-event-type"}},[t._v("#")]),t._v(" getApplicationListeners(event, type)")]),t._v(" "),a("p",[t._v("看完事件多播器，我们再看一下容器中有哪些监听器？通过上面的事件发布流程我们知道，在派发事件时，会先获取到所有的监听器，那这些监听器是从哪里获取的？还是回到我们的refresh方法，在结束BeanFactory的初始化之前有一步registerListeners()注册监听器，我们的监听器就是在这个时候注册到容器中去的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211150614524.png",alt:"image-20220211150614524"}})]),t._v(" "),a("p",[t._v("首先注册指定的静态监听器，我们这里没有。然后来到我们的String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false)从容器中拿到所有的监听器。然后再通过一个增强for将所有的监听器注册到applicationEventMulticaster中：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/pengzong888/imageSource/raw/master/img/2022/2/image-20220211150939196.png",alt:"image-20220211150939196"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);