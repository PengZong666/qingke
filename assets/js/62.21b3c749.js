(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{411:function(o,s,r){"use strict";r.r(s);var e=r(14),t=Object(e.a)({},(function(){var o=this,s=o._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[s("h2",{attrs:{id:"_5、invokebeanfactorypostprocessors-beanfactory-执行beanfactorypostprocessor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、invokebeanfactorypostprocessors-beanfactory-执行beanfactorypostprocessor"}},[o._v("#")]),o._v(" 5、invokeBeanFactoryPostProcessors(beanFactory); 执行BeanFactoryPostProcessor")]),o._v(" "),s("blockquote",[s("p",[o._v("BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后执行的")]),o._v(" "),s("p",[o._v("两个接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor")]),o._v(" "),s("ul",[s("li",[o._v("1、先执行BeanDefinitionRegistryPostProcessor的方法：\n1、获取所有的BeanDefinitionRegistryPostProcessor\n2、先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor\npostProcessor.postProcessBeanDefinitionRegistry(registry);\n3、在执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor\npostProcessor.postProcessBeanDefinitionRegistry(registry);\n4、最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessor\npostProcessor.postProcessBeanDefinitionRegistry(registry);")]),o._v(" "),s("li",[o._v("2、再执行BeanFactoryPostProcessor的方法：\n1、获取所有的BeanFactoryPostProcessor\n2、先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor\npostProcessor.postProcessBeanFactory(beanFactory);\n3、在执行实现了Ordered顺序接口的BeanFactoryPostProcessor\npostProcessor.postProcessBeanFactory(beanFactory);\n4、最后执行没有实现任何优先级或者是顺序接口的BeanFactoryPostProcessor\npostProcessor.postProcessBeanFactory(beanFactory);")])])])])}),[],!1,null,null,null);s.default=t.exports}}]);