(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{417:function(e,s,t){"use strict";t.r(s);var n=t(14),r=Object(n.a)({},(function(){var e=this._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h2",{attrs:{id:"_12、【完成beanfactory的初始化创建工作-ioc容器就创建完成】finishrefresh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12、【完成beanfactory的初始化创建工作-ioc容器就创建完成】finishrefresh"}},[this._v("#")]),this._v(" 12、【完成BeanFactory的初始化创建工作，IOC容器就创建完成】finishRefresh();")]),this._v(" "),e("blockquote",[e("ul",[e("li",[this._v("12、【完成BeanFactory的初始化创建工作，IOC容器就创建完成】finishRefresh();\n1、【初始化和生命周期有关的后置处理器】initLifecycleProcessor();   LifecycleProcessor\n默认从容器中找是否有LifecycleProcessor的组件，如果没有new DefaultLifecycleProcessor();加入到容器中\n写一个LifecycleProcessor的实现类，可以在BeanFactory刷新完成以及关闭的时候做一些事情\nvoid onRefresh();   void onClose();\n2、【拿到前面定义的生命周期处理器（BeanFactory），回调onRefresh()】getLifecycleProcessor().onRefresh();\n3、【发布容器刷新完成事件】publishEvent(new ContextRefreshedEvent(this));\n4、【最后一步】LiveBeansView.registerApplicationContext(this);")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);